{"ast":null,"code":"import _regeneratorRuntime from\"/Users/elc-laurence/Desktop/GitHub/challenge-0-simple-nft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/elc-laurence/Desktop/GitHub/challenge-0-simple-nft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/elc-laurence/Desktop/GitHub/challenge-0-simple-nft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{CameraOutlined,QrcodeOutlined}from\"@ant-design/icons\";import{Badge,Input}from\"antd\";import{useLookupAddress}from\"eth-hooks/dapps/ens\";import React,{useCallback,useState}from\"react\";import QrReader from\"react-qr-reader\";import Blockie from\"./Blockie\";// probably we need to change value={toAddress} to address={toAddress}\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function AddressInput(props){var _useState=useState(props.value),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),scan=_useState4[0],setScan=_useState4[1];var currentValue=typeof props.value!==\"undefined\"?props.value:value;var ens=useLookupAddress(props.ensProvider,currentValue);var scannerButton=/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:4,cursor:\"pointer\"},onClick:function onClick(){setScan(!scan);},children:[/*#__PURE__*/_jsx(Badge,{count:/*#__PURE__*/_jsx(CameraOutlined,{style:{fontSize:9}}),children:/*#__PURE__*/_jsx(QrcodeOutlined,{style:{fontSize:18}})}),\" \",\"Scan\"]});var ensProvider=props.ensProvider,onChange=props.onChange;var updateAddress=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(newValue){var address,possibleAddress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(typeof newValue!==\"undefined\")){_context.next=14;break;}address=newValue;if(!(address.indexOf(\".eth\")>0||address.indexOf(\".xyz\")>0)){_context.next=12;break;}_context.prev=3;_context.next=6;return ensProvider.resolveName(address);case 6:possibleAddress=_context.sent;if(possibleAddress){address=possibleAddress;}// eslint-disable-next-line no-empty\n_context.next=12;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](3);case 12:setValue(address);if(typeof onChange===\"function\"){onChange(address);}case 14:case\"end\":return _context.stop();}}},_callee,null,[[3,10]]);}));return function(_x){return _ref.apply(this,arguments);};}(),[ensProvider,onChange]);var scanner=scan?/*#__PURE__*/_jsx(\"div\",{style:{zIndex:256,position:\"absolute\",left:0,top:0,width:\"100%\"},onClick:function onClick(){setScan(false);},children:/*#__PURE__*/_jsx(QrReader,{delay:250,resolution:1200,onError:function onError(e){console.log(\"SCAN ERROR\",e);setScan(false);},onScan:function onScan(newValue){if(newValue){console.log(\"SCAN VALUE\",newValue);var possibleNewValue=newValue;if(possibleNewValue.indexOf(\"/\")>=0){possibleNewValue=possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));console.log(\"CLEANED VALUE\",possibleNewValue);}setScan(false);updateAddress(possibleNewValue);}},style:{width:\"100%\"}})}):\"\";return/*#__PURE__*/_jsxs(\"div\",{children:[scanner,/*#__PURE__*/_jsx(Input,{id:\"0xAddress\"// name it something other than address for auto fill doxxing\n,name:\"0xAddress\"// name it something other than address for auto fill doxxing\n,autoComplete:\"off\",autoFocus:props.autoFocus,placeholder:props.placeholder?props.placeholder:\"address\",prefix:/*#__PURE__*/_jsx(Blockie,{address:currentValue,size:8,scale:3}),value:ens||currentValue,addonAfter:scannerButton,onChange:function onChange(e){updateAddress(e.target.value);}})]});}","map":{"version":3,"sources":["/Users/elc-laurence/Desktop/GitHub/challenge-0-simple-nft/packages/react-app/src/components/AddressInput.jsx"],"names":["CameraOutlined","QrcodeOutlined","Badge","Input","useLookupAddress","React","useCallback","useState","QrReader","Blockie","AddressInput","props","value","setValue","scan","setScan","currentValue","ens","ensProvider","scannerButton","marginTop","cursor","fontSize","onChange","updateAddress","newValue","address","indexOf","resolveName","possibleAddress","scanner","zIndex","position","left","top","width","e","console","log","possibleNewValue","substr","lastIndexOf","autoFocus","placeholder","target"],"mappings":"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","sourcesContent":["import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) { }\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}